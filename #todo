
// #todo - custom kanalen aanmaken - selectie van (FeedService)
// #todo - inline form - wysiwyg editor


// --- adding and removing items to an entity's collection ---
    // ---> allowDuplicates = playlist
    // ---> no allowDuplicates = social network (follow users)


================================================================

#todo

// 1. first store new subitems, then connect (in mysql transaction) - hoe omgaan met publish?
// 2. Best effort template selection (best match)
// 3. Mollie account
// 4. throw (silent) warnings on unfound entity properties, but return empty value
// 5. add example of realtime chat functionality to documentation
// 6. differential synchronization https://neil.fraser.name/writing/sync/
// 7. local storage for offline editing (only on auto-save documents)
// 8. temp values (common shadow), if (commonShadown.present) then load, else create commonShadow
// 9. Auto-save: client geeft signaal om cache persistent te maken
// 10. store collab-versions in mongo
// 11. php port van diff_match_patch https://github.com/nuxodin/diff_match_patch-php
// 1. add newly patched version to changeList. If no change -> remove from stack, else broadcast
// 14. aparte array in memcache om versies bij te houden (timestamp) (propertySelector + '_version_' + TimeStamp)
// 15. store offline full docs onConnect for manual recovery in case of pathc failure
// 16. checksum
// 17. notification api entry point for javascript debugging
// 18. form has collaboration mode (implements auto-save)
// 19. Mimoto.Aimless -> getValueFromField
// 20. show cursor position of other users
// 21. update changed value only
// 22. register fields on collaborative form


class SubprojectPaymentTypes -> connect to dropdoen/radiobutton via selection
{    
    const FIXED = 'fixed';
    const TIME_MATERIAL = 'time_material';   
}

class SubprojectPhases 
{    
    const REQUEST = 'request';
    const CURRENTPROJECT = 'currentproject';
    const ARCHIVED = 'archived';   
}

class SubprojectProbabilities
{    
    const VERY_UNSURE = 0.1;
    const COULD_GO_EITHER_WAY = 0.5;
    const PRETTY_SURE = 0.9;
}


================================================================


#todo - input
// 1. add new entity
// 2. save new entity
// 3. show new property fields
// 4. save new property
// 5. remove existing property
// 6. move property up
// 7. move property down

#todo - database
// 1. onCreateEntity -> create dbtable
// 2. onChangeEntity -> rename dbtable
// 3. onAddProperty -> add column
// 4. onRenameProperty -> rename column
// 5. onChangePropertyOptions -> flush colum if relevant (?)


Table editing
http://php.net/manual/en/function.mysql-list-fields.php
http://stackoverflow.com/questions/1526688/get-table-column-names-in-mysql
http://stackoverflow.com/questions/16113570/how-to-add-new-column-to-mysql-table


https://github.com/filamentgroup/elementary/blob/master/examples/index.html







- elasticListener (and syncer)
- union server
- oncreate invoice / make pdf / afterwards dispatch event invoice pdf ready / send mail (action queue)
- dashboardvoorbeeld aantal updates en nieuw events per dag
- collection en entity zijn eindnodes voor mimoto, dus forward
- layout
- componenten aan datamodels koppelen (input of output)
- viewmodel config (entity, twig) en oproepbaar via Aimless api
- notificatieconfig
- cohortconfig
- default vars/settings in entity (value)
- property heeft fixed value (default) ipv editbaar. Dit wordt op formniveau bepaald?
- popvote app aangeven welke inerresses, wat vrienden belangrijk vinden en grote verplichte stemmingen. Voorkeur van feed zelf instelbaar, volledig
- config mail indien x en x maar niet y
- auto create entity table, or change on save
- enum
- meerdere mogelijkheden inputs per type value (selecteer bij formconfig)



#feature

// 1. change filter settings based on mls_query


// 1. authenticate users
// 2. show which user on which part
// 3. live diff updates client2client
// 6. focus input when other user active
// 7. Alle exceptions inschieten via Livescreen messages

// 1. ACL in data-mimoto-id hash
// 2. Artikelsysteem herschrijven (publish, unpublish, events, service, editor, live wysiwyg)
// 3. MailService (config selector van verschillende entity-properties
// 4. test vase: cohort selector
// 5. formbuilder
// 6. plan The Correspondent uitwerken (volledig incl toekomst, zie todoist)
// 7. comments -> auto send and load (page/user/add, change)
// 8. Dat zou wel een mooie restrictie zijn. Dat ie kijkt naar de job-log om te checken of 
//    een 'job-id' al een keer voorkomt: "article/<article-id>/notifypermail/user/<user-id>" 
//    die op success staat. Waar in ons geval hier, de auteur van het stuk de user is.
// 9. notificaties en commands zijn verschillend in prioriteit (de eerste mag falen)


// 1. UserService -> changePassword

#todo
-----
9. handle sequences (type = "action" || "sequence" with actions)
12. Project.twig geschikt voor kleine schermen (getallen onder projectnaam)
14. hide dom-element on conditional (bijv. bij agency)
15. MySQL safe injection


// #notes - getProperty
// ======
// return collection of return alles in group
            
// getValue('options') geeft niets, want group, en dus geen echte property, dus geen value
// getValue('options.*') geeft alle subnodes


// 1. exact matches needed, anders niet zeker of het een property is of een group
// 2. replace * with "[a-zA-Z][a-zA-Z0-9\-_]"
// 3. alleen echte properties retourneren

// a. echte properties hebben volledig paden in de vorm van de propertyName
// b. alleen * kan gebruikt worden voor bredere searches
// c. ? aan begin vervangen door [a-zA-Z]
// d. ? op pos=2+ vervavangen door [a-zA-Z0-9\-_]

// use cases (ook opnemen in docs)
// 
// options.receiveDailyMail
// options.receiveWeeklyMail
//
// get - getValue('options') return nothing (throw error)
// get - getValue('options.*') return values
//
// find in collection kan lege array retourneren. Leeg is ook goed, maar op property niveau is leeg fout
//
// MimotoCollection
// altijd maar een single property opvragen, niet meerdere tegelijk
// check of dit makkelijker kan
// alleen een collection kan dit sneller
// get() moet direct uit aray kunnen lezen. Het is er, of het is er niet
// subproperty (first part), erna query
//
// CONCLUSIE: geen * en ? support voor nu. Dit breekt het get-principe
// onduidelijk of een resultaat een waarde is of een collection
//
// getCollection i.p.v. getValue 
// findValue
// get()
// find()


// serialize() -> returns json with values, collections etc (associative array)

// 1. check rest of selector
// 2. determine subselector

// 3. if value -> read
// 4. if entity -> read, then forward
// 5. if collection -> read, the forward
// 6. readValue
// 7. readCollection
// 8. readEntity








// 1. image placeholder
// 2. onSave image -> create other versions
// 3. on call placeholder -> start parsing of image or push existing job in queue


 // collection query:
        // "subprojects.{phase='archived'}.name"
        
        // selector parser (een collection heeft z'n eigen manier)
        
        
        
        // config
    // check type -> validate in form op basis van config zoals opgeslagen in database (by config)
    
    
    // store
        
    
    
    //stop er json in, verdeel over de verschillende nodes



 #document
----------
1. Waarom $sEntityType meegeven aan MimotoEntity constructor en waarvoor wordt deze gebruikt? (generiek dispatchen domain events)
2. EventService ondersteunt configurable actions en is verantwoordelijk voor de routing i.c.m. dynamische acties

#notes
------
1. Platform geeft update seintjes af. De actionflows regelen de logica erachter. 
   Centrale eventlistener. 1 event, niet alle want dan niet handig uit te breiden 
2. Messages: pusher/mail/whatsapp notificationcenter in vaste formats want core 
   messaging options, parameters zijn configureerbaar (mapping, schedule niet als 
   optie, maar als mogelijkheid voor delayed scheduleMail scheduleWhatsapp etc 
   scheduled acties)
3. NotificationService / MailService / EventService
4. Sequences, middleware, actions, selectionquery, status, vast interface (execute, 
    request etc), config
5. push page update
6. Entity Oriented Programming - EOP
7. Mimoto LiveScreen - mls - Aimless (klopt, want het is een vrije broadcast :)




        // model set -> save to modified -> track changes, default aan na uitgeven entity
        
        //if has values -> replace values
        //if component && id -> reload component
        //if (componen && new-id -> load and add 
        

//            
//                // entity.getModifiedFields
//                
//                // if (no poperties changed) -> update, "force component update" als setting
//                
//                echo 'eventType = '.$event->getType()."\n";
//                
//                
//            // configs zijn low effort (event -> action, load config gegevens)
//
//
//            entity = 'client'
//            id = extracted from entity
//            property -> get from mapping
//        
//       



// connect elements from template -> send content, voorzien van meta data
// auto update, connect field with event -> mapping ->type = component (via url) of field (via direct value)

// ----------> ListComponent
// gearman -> type-async -> in jobserver
// listener class -> start van sequence
// generaliseer PusherEventHandler en pas toe op de 4 pagina's
// scheduled requests/actions (ActionSequence)
// Queue met statusupdates, bijwerking en monitoring



// validate validity of the client monitor (auto-reboot)
// data event
// component event
// page event
// popup event -> auto popup with message of reboot
// vraag huidige staat op bij de server (save state zoals de client monitor)
// State per gebruiker. start waar je was gebleven.



// #todo listeners
//$app['dispatcher']->addListener('xxx', 'MaidoProjects\\UserInterface\\ProjectsController::getProjectOverview');
// 
// - repositories gooien update events uit
// - op deze events worden sequences getriggerd
// - deze sequences kunnen op basis van config worden opgezet
//      bijv. klaarzetten van diverse mail requests in timed queue -> welkom, eerste handleiding dag later
//      de request (of command) wordt opgeslagen, niet de feitelijke mail. Zo kan nog op het laatste moment
//      een update worden meegenomen in die mail
//      RequestQueue -> wordt aangestuurd door cronjob die kijkt of een request aan de beurt is en gooit deze
//      weer het systeem in (bijv. via jobserver of direct
//      Config: ON(user.new) -> sendMail with params (template, User)

/*
 * #todo - EventService
 * sync/async - recipies - action flows
 * sendRequest
 * sendUpdate
 * sendWelcomeMail
 * 
 * -------> sequence ON(event) stap 1, 2, 3 -> register steps, zoals in Mimoto TaskManager
 * 
 * createUser -> UPDATE: user.new
 * send welcome mail
 * wie stelt de mail op? MailService interface -> type, data
 * MailService->sendMail($sTermplate);
 * 
 * commando -> commandHandler (CommandBus pattern)
 * 
$app['dispatcher']->addListener(UserEvents::AFTER_INSERT, function(UserEvent $event) use ($app) {
    $user = $event->getUser();
    $app['logger']->info('Created user ' . $user->getId());
});
*/








// #todo - archive=================

        // var aComponents = $("[data-mimoto-selection='" + mls_container + "']");
        //
        // // 1. data-mimoto-selection
        //
        //
        //
        //
        //
        //
        //
        //
        //         // --- component level ---
        //
        // // search
        // var aComponents = $("[data-mimoto-id='" + sEntityIdentifier + "']");
        // // get all elements with //$('[data-mimoto-id]') en check op sEntityIdentifier
        //
        // aComponents.each( function(index, $component)
        // {
        //
        //     // read
        //     //var mls_config = $($component).attr("data-mimoto-id");
        //
        //     // init
        //     var config = [];
        //
        //     // read
        //     var mls_config = $($component).attr("data-mimoto-config");
        //     var mls_component = $($component).attr("data-mimoto-component");
        //
        //     // verify
        //     if (mls_config !== undefined)
        //     {
        //         var aConfigParams = mls_config.split(';');
        //
        //         for (var i = 0; i < aConfigParams.length; i++)
        //         {
        //
        //             // register
        //             var configParam = aConfigParams[i];
        //             var aConfigParamElements = configParam.split(':');
        //
        //             // register
        //             config[aConfigParamElements[0].trim().toLowerCase()] = aConfigParamElements[1].trim().toLowerCase();
        //         }
        //     }
        //
        //     // reload component
        //     if (config['onupdate'] == 'reload') // mls_config="onUpdate:reload"
        //     {
        //         $.ajax({
        //             type: 'GET',
        //             url: '/Mimoto.Aimless/data/' + data.entityType + '/' + data.entityId + '/' + mls_component,
        //             data: null,
        //             dataType: 'html',
        //             success: function (data) {
        //                 $($component).replaceWith(data);
        //             }
        //         });
        //
        //         // return;
        //     }
        //
        // });
        //



        // --- container level ---


        //console.log('Console.update - filtered');

        // 1. data-mimoto-contains="project.3.subprojects" wordt niet meegestuurd bij wie het object hoort
        // 2. partOf
        // 3. zoek naar connectietabellen



        // setup
//        var mls_container = data.entityType;
//
//
//        // search
//        var aComponents = $("[data-mimoto-contains='" + mls_container + "']");
//
//        aComponents.each( function(index, $component)
//        {
//
//            console.log('In data-mimoto-contains for updating information');
//
//            // read
//            var mls_contains = $($component).attr("data-mimoto-contains");
//
//            console.log(mls_contains);
//
//            var mls_filter = $($component).attr("data-mimoto-filter");
//            var mls_component = $($component).attr("data-mimoto-component");
//            //var mls_sortorder = $($component).attr("data-mimoto-sortorder"); // #todo
//
//            // verify
//            if (mls_component !== undefined)
//            {
//                $.ajax({
//                    type: 'GET',
//                    url: '/Mimoto.Aimless/' + data.entityType + '/' + data.entityId + '/' + mls_component,
//                    data: null,
//                    dataType: 'html',
//                    success: function (data) {
//                        $($component).append(data);
//                    }
//                });
//            }
//
//        });



// todo =============== field validation (archive)

// var scope = {};
    // scope.validation = validation;
    // scope.sInputFieldId = sInputFieldId;
    //
    // if (typeof validation == "undefined") return;
    //
    // $('#form_data_' + sInputFieldId).on('input', function(e)
    // {
    //
    //     // init
    //     var bValidated = true;
    //     var sErrorMessage = '';
    //
    //
    //     var value = $(this).val();
    //
    //
    //     if (validation.regex)
    //     {
    //         var regex = new RegExp(validation.regex, 'g');
    //
    //         if (!regex.test(value))
    //         {
    //             var bValidated = false;
    //             sErrorMessage += 'Value formatted incorrectly. Allowed format is: ' + validation.regex + '. ';
    //         }
    //     }
    //
    //     if (validation.maxchars)
    //     {
    //         if (value.length > validation.maxchars)
    //         {
    //             var bValidated = false;
    //             sErrorMessage += 'Too many characters (' + value.length + ' of ' + validation.maxchars + ')';
    //         }
    //     }
    //
    //     if (!bValidated)
    //     {
    //         $('#form_errormessage_' + scope.sInputFieldId).addClass('error');
    //         $('#form_data_' + scope.sInputFieldId).addClass('error');
    //         $('#form_errormessage_' + scope.sInputFieldId).text(sErrorMessage);
    //         console.warn(sErrorMessage);
    //     }
    //     else
    //     {
    //         $('#form_errormessage_' + scope.sInputFieldId).removeClass('error');
    //         $('#form_data_' + scope.sInputFieldId).removeClass('error');
    //         $('#form_errormessage_' + scope.sInputFieldId).text('');
    //         console.log('Input = ok!');
    //     }
    // });